#!/usr/bin/env bash
#
# Run the Google Java Format tool over changed .java files.
#
# Changed Java files are determined by diff'ing commits on
# the current branch with the upstream branch.
#
# Adds a commit with all formatting changes. If the flag
# --no-commit is specified, the files will be left unstaged.
#
# Intended to be run on a development branch, either manually
# or automatically in a git post-commit or pre-push hook.
#
# See https://github.com/google/google-java-format

# Exit early if there are any changes to tracked files,
# as we don't want to mix in our formatting changes
if ! git diff --quiet || ! git diff --staged --quiet; then
  2>&1 echo "ERROR: Commit or remove changes first"
  exit 1
fi

version=1.7
jar=/tmp/google-java-format-${version}-all-deps.jar

# Download uberjar into /tmp directory if we don't have it
if [ ! -f $jar ]; then
    > $jar curl -L https://github.com/google/google-java-format/releases/download/google-java-format-${version}/google-java-format-${version}-all-deps.jar
fi

# Get paths of changed .java files in all commits between
# the current branch and upstream. Ignore files that were deleted.
upstream=$(git rev-parse --abbrev-ref '@{upstream}')
changed_java_files=$(git diff "$upstream" HEAD --name-only --diff-filter=d \
    | grep "\.java$")

# Exit early if there's no java files to format
[ -z "$changed_java_files" ] && exit

# Run formatter and make changes directly to files.
#
# Run from the root project directory since git diff
# will return filepaths relative to the root directory
cd "$(git rev-parse --show-toplevel)"
java -jar $jar --replace --set-exit-if-changed $changed_java_files

# Exit if nothing was changed
[ $? -eq 0 ] && exit

# Don't commit changes if flag is specified
[ "$1" = "--no-commit" ] && exit

# Commit formatting changes.
# Disable all hooks during this commit so we don't recurse
git add $changed_java_files
git -c core.hooksPath= commit --message "(maint) Apply $(basename $jar)"
