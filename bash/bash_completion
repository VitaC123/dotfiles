# -*- mode: sh -*-

_get_repos() {
    for repo in $(ls -d $DEV_ROOT/*/); do
        if [ -d $repo/.git ]; then
            basename $repo
        fi
    done
}

_repo_completion() {
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_repos)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _repo_completion pl
complete -F _repo_completion pomd
complete -F _repo_completion pomv
complete -F _repo_completion dep
complete -F _repo_completion github

_get_pre_commit_hooks() {
    find $DOTFILES/git/hooks/pre-commit -type f -exec basename {} \;
}

_pre_commit_hook_completion() {
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_pre_commit_hooks)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _pre_commit_hook_completion install-pre-commit-hook

_checkout_package_completion() {
    # Account for the required "-n" flag
    if [ "${#COMP_WORDS[@]}" != "3" ]; then
        return
    fi

    # File generated by list-pipelines-repos
    options=$(cat /tmp/distelli-repos)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[2]}"))
}

complete -F _checkout_package_completion checkout-package.py

_get_dr_subcommands() {
    # Find subcommands from source files.
    # Skip the root.go file because it's not actually a subcommand.
    find "$DOTFILES"/golang/nwolfe/dr/cmd -type f ! -name "root.go" -exec basename {} .go \;
}

_dr_completion() {
    # Prevents [tab][tab]... from repeatedly adding the completion
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_dr_subcommands)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _dr_completion dr

_update_completion() {
    # Prevents [tab][tab]... from repeatedly adding the completion
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options="all doom brew"
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _update_completion update

_cht_complete()
{
    local cur prev opts
    _get_comp_words_by_ref -n : cur

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$(curl -s cheat.sh/:list)"

    if [ ${COMP_CWORD} = 1 ]; then
          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
          __ltrim_colon_completions "$cur"
    fi
    return 0
}

complete -F _cht_complete cheat
