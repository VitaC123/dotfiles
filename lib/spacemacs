;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration. You should not put any user
   code in this function besides modifying the variable values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; (default nil)
   dotspacemacs-enable-lazy-installation nil

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-snippets-in-popup t)
     better-defaults
     (clojure :variables clojure-enable-fancify-symbols t)
     (colors :variables colors-enable-rainbow-identifiers t)
     deft
     emacs-lisp
     erc
     git
     github
     markdown
     (mu4e :variables
           mu4e-installation-path "/usr/local/share/emacs/site-lisp")
     org
     osx
     puppet
     python
     ruby
     (shell :variables
            shell-default-shell 'multi-term
            shell-default-term-shell "/bin/zsh")
     spacemacs-layouts
     spotify
     (spell-checking :variables spell-checking-enable-by-default nil)
     version-control
     yaml
     )

   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer. If you need some configuration for these packages then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(json-reformat)

   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()

   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of the list
   ;; `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function. This function is called at the very startup of
   Spacemacs initialization before layers configuration. You should not put
   any user code in this function besides modifying the variable values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to set it to t.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5

   ;; If non nil then spacemacs will check for updates at startup when the
   ;; current branch is not `develop'. (default t)
   dotspacemacs-check-for-update t

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in the startup buffer. if nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists '(agenda bookmarks recents projects)

   ;; Number of recent files to show in the startup buffer. Ignored if
   ;; `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
   dotspacemacs-startup-recent-list-size 5

   ;; Default major mode for the scratch buffer (default `text-mode').
   dotspacemacs-scratch-mode 'org-mode

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(monokai solarized-light solarized-dark leuven zenburn)

   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)

   ;; The leader key
   dotspacemacs-leader-key "SPC"

   ;; The leader key accessible in `emacs state' and `insert state'.
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m'. Set it to `nil' to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; The key used for Emacs commands (M-x) (after pressing the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET. Setting it to a non-nil value allows
   ;; for separate commands under <C-i> and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this
   ;; only works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; If non nil `Y' is remapped to `y$' in Evil state. (default nil)
   dotspacemacs-remap-Y-to-y$ t

   ;; If non nil, invert the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non nil then the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts t

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means
   ;; that no major mode or minor modes are active. (default 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory, and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil

   ;; If non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil

   ;; Define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom

   ;; If non nil the paste micro-state is enabled. While enabled pressing `p'
   ;; several times cycles between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state t

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom', and
   ;; `right-then-bottom'. `right-then-bottom' tries to display the frame to
   ;; the right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only).
   dotspacemacs-fullscreen-at-startup nil

   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non nil the frame is maximized when Emacs starts up. Takes effect
   ;; only if `dotspacemacs-fullscreen-at-startup' is nil. (default nil)
   ;; (Emacs 24.4+ only).
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen
   dotspacemacs-smooth-scrolling t

   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode t

   ;; If non-nil pressing the closing paranthesis `)' key in insert mode passes
   ;; over any automatically added closing paranthesis, bracket, quote, etc.
   ;; This can be temporarily disabled by pressing `C-q' before `)'.
   ;; (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimeters. Possible values are `any',
   ;; `current', `all', or `nil'. Default is `all' (highlight any scope
   ;; and emphasize the current one). (default 'all)
   dotspacemacs-highlight-delimeters 'all

   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")

   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil

   ;; Delete whitespace while saving buffer. Possible values are `all' to
   ;; aggressively delete empty lines and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed))

(defun ncw/configure-erc ()
  "Configure IRC. Associated commands:
   * `ncw/irc-jack-in' Connect to all servers
   * `ncw/irc-layout'  Configure current frame with channel windows"
  (require 'ncw-irc-config nil t)

  (setq erc-prompt-for-nickserv-password nil
        erc-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE"))

  ;; Don't start buffers in insert mode
  (setq evil-normal-state-modes '(erc-mode))

  ;; Don't wrap long lines
  (add-hook 'erc-join-hook 'toggle-truncate-lines)

  ;; Automatically insert newlines
  (erc-fill-mode t)

  ;; Filter foolish content
  ;; "\\[GitHub\\].* labeled an issue in"
  ;; "\\[GitHub\\].* unlabeled an issue in"
  (setq erc-foolish-content '("Users on #.*"
                              "\\[GitHub\\].* starred"
                              "\\[GitHub\\].* forked"
                              "\\[GitHub\\].* synchronize a Pull Request"))
  (defun ncw/erc-filter-foolish-content (msg)
    "Ignore messages that match `erc-foolish-content'."
    (when (erc-list-match erc-foolish-content msg)
      (setq erc-insert-this nil)))
  (add-hook 'erc-insert-pre-hook 'ncw/erc-filter-foolish-content))

(defun ncw/configure-email ()
  (setq mu4e-maildir "~/Mail")
  (require 'ncw-email-config nil t)

  ;; Syncing messages
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-update-interval 600)

  ;; Viewing messages
  (setq mu4e-show-images t)
  (setq mu4e-view-show-images t)
  (setq mu4e-view-image-max-width 800)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-use-fancy-chars t)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; BEGIN UNDER CONSTRUCTION
  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  (setq shr-color-visible-luminance-min 60)
  ;; (setq shr-color-visible-distance-min 10)
  ;; (setq mu4e-html2text-command
  ;;       ;; Other options:
  ;;       ;;   "html2text -utf8 -nobs -width 72"
  ;;       ;;   "textutil -stdin -stdout -format html -convert txt"
  ;;       (if (executable-find "w3m")
  ;;           "w3m -T text/html"
  ;;         "html2text -utf8 -nobs -width 72"))
  ;; END UNDER CONSTRUCTION

  ;; Sending messages
  (setq mail-user-agent 'mu4e-user-agent)
  (setq smtpmail-stream-type 'starttls)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-sent-messages-behavior 'delete)

  ;; Include sent messages in message threads from search results
  (setq mu4e-headers-include-related t)

  (setq mu4e-headers-leave-behavior 'apply)
  (setq mu4e-headers-skip-duplicates t)

  ;; Same as defaults except use :thread-subject instead of :subject to only
  ;; show subject lines once, on the original message line. Replies will have
  ;; blank subject lines.
  (setq mu4e-headers-fields
        '((:human-date . 12)
          (:flags . 6)
          (:mailing-list . 10)
          (:from . 22)
          (:thread-subject)))

  ;; Enable experimental bookmark support
  (setq mu4e-maildirs-extension-use-bookmarks t)

  ;; Don't expand the maildir tree; seeing the folders isn't useful
  (setq mu4e-maildirs-extension-default-collapse-level 0)

  ;; Refresh the unread/total counts when switching to the main mu4e buffer
  (add-hook 'mu4e-main-mode-hook
            (lambda ()
              (mu4e-maildirs-extension-force-update '(4))))

  ;; Define custom Mail layout - access with `SPC l o m'
  (spacemacs|define-custom-layout "Mail"
    :binding "m"
    :body (mu4e))
  )

(defun ncw/configure-org ()

  (setq deft-directory "~/org")
  (setq deft-extension "org")
  (setq deft-recursive t)

  (with-eval-after-load 'org
    ;; Enable shell language execution support in source blocks.
    ;; See http://orgmode.org/manual/Languages.html#Languages
    (org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))

    ;; Denote list sub-items with a different character
    (setq org-list-demote-modify-bullet '(("-" . "*")
                                          ("*" . "+")))

    (setq org-agenda-files '("~/org/todo.org"
                             "~/org/capture.org"))

    ;; TO-DO entries have the following form:
    ;;
    ;;   * TODO <description you typed in>
    ;;     <time of capture>
    ;;     <any highlighted region during capture>
    ;;     Link: <link to captured item>
    ;;
    ;; Options:
    ;; - Put a blank line before the new entry for readability
    ;; - Don't pollute layout/workspace with capture buffer
    (setq org-capture-templates
          '(("t" "TODO" entry (file "~/org/capture.org")
             "* TODO %?\n\t%T\n\t%i\n\tLink: %l"
             :empty-lines-before 1
             :kill-buffer t)))

    ;; Override existing key binding "SPC C t" to use our template
    (defun ncw/capture-todo ()
      "Capture a TODO item to ~/org/capture.org."
      (interactive)
      (org-capture nil "t"))
    (spacemacs/set-leader-keys "Ct" 'ncw/capture-todo)

    )
  )

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
This function is mostly useful for variables that need to be set before
packages are loaded. If you are unsure, you should try setting them in
`dotspacemacs/user-config' first."
  (add-to-list 'load-path "~/.seacrest/emacs/load-path")
  (setq exec-path-from-shell-check-startup-files nil))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  ;; Don't require a GitHub token when using Paradox package manager
  (setq paradox-github-token t)

  ;; Treat symlinks like regular files; don't ask me for confirmation when
  ;; opening a symlink file.
  (setq vc-follow-symlinks t)

  ;; Turn off the separator for now - there's some UI
  ;; issue causing the separators to look strange
  (setq powerline-default-separator 'nil)

  ;; Tell magit I've seen all of its warnings from the new version.
  (setq magit-last-seen-setup-instructions "1.4.0")

  ;; Auto-wrap long lines by default (in non-programming modes)
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Put version control symbols on left side instead of right
  (setq diff-hl-side 'left)
  (setq git-gutter-fr+-side 'left-fringe)

  ;; Move focus to new splits on easier keybindings
  (spacemacs/set-leader-keys
    "wv" 'split-window-right-and-focus
    "ws" 'split-window-below-and-focus)

  ;; Don't bother me with a warning popup when saving remote jarfiles
  (add-to-list 'warning-suppress-types '(undo discard-info))

  ;; Open a dired buffer when switching to new projects
  (setq projectile-switch-project-action 'projectile-dired)

  ;; Make undo a bit more aggressive in how much it undoes
  (setq evil-want-fine-undo "No")

  (ncw/configure-erc)
  (ncw/configure-email)
  (ncw/configure-org)

  (load-file "$DOTFILES/misc/functions.el")
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
