;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

;; My custom configuration functions
;; ---------------------------------

(defun nate/enable-secrets-directory ()
  "Add the secrets directory to the load path so we can store
   sensitive configuration data outside of VCS."
  (add-to-list 'load-path "~/.emacs-secrets"))

(defun nate/enable-dotfiles-in-shell-command ()
  "Honor .bashrc when executing a shell command (ie. M-!) so we
   can call custom functions and aliases defined in ~/.dotfiles."
  (setq shell-file-name "bash")
  (setq shell-command-switch "-ic"))

(defun nate/clean-whitespace-on-save ()
  "Remove trailing whitespace and trailing blank lines on file save."
  (add-hook 'before-save-hook
            (lambda ()
              (let ((whitespace-style '(trailing empty)))
                (whitespace-cleanup)))))

(defun nate/configure-rcirc ()
  "Configuration for rcirc. Sensitive configuration (passwords)
   is saved in ~/.emacs-secrets/pinit-rcirc.el"
  ;; Auto-connect to these channels
  (setq rcirc-server-alist
        '(("chat.freenode.net"
           :channels ("#puppet" "#trapperkeeper" "#emacs" "#clojure"))))

  ;; Text should fill the whole frame before line wrapping
  (setq rcirc-fill-column 'frame-width)

  ;; Kill all channel buffers when the server buffer is killed
  (setq rcirc-kill-channel-buffers t)

  (setq rcirc-default-nick "nwolfe")
  (setq rcirc-default-full-name "Nate Wolfe"))

(defun nate/configure-paradox ()
  "Configuration for Paradox package manager. GitHub
   token is saved in ~/.emacs-secrets/pinit-paradox.el"
  (require 'pinit-paradox)
  (setq paradox-automatically-star nil))

(defun nate/configure-powerline ()
  ;; Turn off the separator for now - there's some UI
  ;; issue causing the separators to look strange
  (setq powerline-default-separator 'nil))

(defun nate/configure-cider ()
  ;; Extend smartparens-strict-mode to REPL
  (if dotspacemacs-smartparens-strict-mode
      (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)))

;; Spacemacs configuration functions
;; ---------------------------------

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.dotfiles/config-layers/")

   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(extra-langs
     markdown
     osx
     (git :variables
          ;; Enable github PRs, gists, and browse file on GitHub
          git-enable-github-support t)
     (clojure :variables
              clojure-enable-fancify-symbols t)
     (colors :variables
             colors-enable-rainbow-identifiers t))

   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()

   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function. This function is called at the very startup of
   Spacemacs initialization before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Specify the startup banner. If the value is an integer then the
   ;; banner with the corresponding index is used, if the value is `random'
   ;; then the banner is chosen randomly among the available banners, if
   ;; the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'random

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(monokai solarized-light solarized-dark leuven zenburn)

   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)

   ;; The leader key
   dotspacemacs-leader-key "SPC"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`
   dotspacemacs-major-mode-leader-key ","

   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"

   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycles between the kill ring content.
   dotspacemacs-enable-paste-micro-state t

   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4

   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time.
   dotspacemacs-loading-progress-bar t

   ;; Enable micro-state for helm buffer when pressing on TAB.
   dotspacemacs-helm-micro-state t

   ;; If non nil the frame is fullscreen when Emacs starts up (Emacs 24.4+ only).
   dotspacemacs-fullscreen-at-startup nil

   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non nil the frame is maximized when Emacs starts up (Emacs 24.4+ only).
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   dotspacemacs-maximized-at-startup t

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90

   ;; If non nil unicode symbols are displayed in the mode line (e.g. for lighters)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen
   dotspacemacs-smooth-scrolling t

   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t

   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil

   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil)

  ;; User initialization goes below

  (nate/enable-secrets-directory))

(defun dotspacemacs/config ()
  "Configuration function. This function is called at the very end of Spacemacs
   initialization after layers configuration."
  (nate/enable-dotfiles-in-shell-command)
  (nate/clean-whitespace-on-save)
  (nate/configure-rcirc)
  (nate/configure-paradox)
  (nate/configure-powerline)
  (nate/configure-cider))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
