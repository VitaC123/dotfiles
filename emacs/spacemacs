;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration. You should not put any user
   code in this function besides modifying the variable values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused',
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that supports lazy installation, even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disables the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing a
   ;; layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t
                      auto-completion-enable-snippets-in-popup t)
     better-defaults
     (colors :variables colors-colorize-identifiers 'all)
     deft
     emacs-lisp
     git
     github
     helm
     html
     markdown
     org
     osx
     puppet
     python
     ruby
     (shell :variables
            shell-default-shell 'multi-term
            shell-default-height 40
            shell-default-term-shell "/bin/zsh")
     spacemacs-layouts
     spotify
     (spell-checking :variables spell-checking-enable-by-default nil)
     version-control
     yaml
     )

   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer. If you need some configuration for these packages then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(json-mode json-reformat dumb-jump)

   ;; List of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behavior of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused', and `all'.
   ;; `used-only' installs only explicitly used packages and uninstalls any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstalls them. (default `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function. This function is called at the very startup of
   Spacemacs initialization before layers configuration. You should not put
   any user code in this function besides modifying the variable values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to set it to t.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5

   ;; If non nil then spacemacs will check for updates at startup when the
   ;; current branch is not `develop'. Note that checking for new versions
   ;; works via git commands, thus it calls GitHub services whenever you
   ;; start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t

   ;; List of items to show in startup buffer or an association list of the
   ;; form `flist-type . list-size)'. If nil it is disabled.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; Possible values for list-type are:
   ;; `recents', `bookmarks', `projects', `agenda', `todos'.
   ;; (default '((recents . 5) (projects . 7)))
   dotspacemacs-startup-lists '(bookmarks)

   ;; Default major mode for the scratch buffer (default `text-mode').
   dotspacemacs-scratch-mode 'org-mode

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark monokai)

   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   ;; Good ones: "Source Code Pro", "Anonymous Pro", "mononoki", "menlo"
   dotspacemacs-default-font '("menlo"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)

   ;; The leader key
   dotspacemacs-leader-key "SPC"

   ;; The leader key accessible in `emacs state' and `insert state'.
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m'. Set it to `nil' to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; The key used for Emacs commands (M-x) (after pressing the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET. Setting it to a non-nil value allows
   ;; for separate commands under <C-i> and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this
   ;; only works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t

   ;; If non nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t

   ;; If non nil, `J' and `K' move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil

   ;; If non nil, invert the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non nil then the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts t

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means
   ;; that no major mode or minor modes are active. (default 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory, and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil

   ;; If non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil

   ;; Define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom

   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always

   ;; If non nil the paste micro-state is enabled. While enabled pressing `p'
   ;; several times cycles between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state t

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom', and
   ;; `right-then-bottom'. `right-then-bottom' tries to display the frame to
   ;; the right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only).
   dotspacemacs-fullscreen-at-startup nil

   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native t

   ;; If non nil the frame is maximized when Emacs starts up. Takes effect
   ;; only if `dotspacemacs-fullscreen-at-startup' is nil. (default nil)
   ;; (Emacs 24.4+ only).
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen
   dotspacemacs-smooth-scrolling t

   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode t

   ;; If non-nil pressing the closing paranthesis `)' key in insert mode passes
   ;; over any automatically added closing paranthesis, bracket, quote, etc.
   ;; This can be temporarily disabled by pressing `C-q' before `)'.
   ;; (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimeters. Possible values are `any',
   ;; `current', `all', or `nil'. Default is `all' (highlight any scope
   ;; and emphasize the current one). (default 'all)
   dotspacemacs-highlight-delimeters 'all

   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")

   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil

   ;; Delete whitespace while saving buffer. Possible values are `all' to
   ;; aggressively delete empty lines and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed))

(defun ncw/configure-org ()

  (setq deft-directory "~/org")
  (setq deft-extension "org")
  (setq deft-recursive t)

  (with-eval-after-load 'org
    ;; Enable shell language execution support in source blocks.
    ;; See http://orgmode.org/manual/Languages.html#Languages
    (org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))

    ;; Denote list sub-items with a different character
    (setq org-list-demote-modify-bullet '(("-" . "*")
                                          ("*" . "+")))

    (setq org-agenda-files '("~/org/todo.org"
                             "~/org/capture.org"))

    ;; Custom workspace with todo.org on the left side,
    ;; captures.org on the right, and cursor focus on todo.org.
    (spacemacs|define-custom-layout "TODO"
      :binding "t"
      :body
      (progn
        (find-file (second (org-agenda-files)))
        (split-window-horizontally)
        (find-file (first (org-agenda-files)))))

    ;; TO-DO entries have the following form:
    ;;
    ;;   * TODO <description you typed in>
    ;;     <time of capture>
    ;;     <any highlighted region during capture>
    ;;     Link: <link to captured item>
    ;;
    ;; Options:
    ;; - Put a blank line before the new entry for readability
    ;; - Don't pollute layout/workspace with capture buffer
    (setq org-capture-templates
          '(("t" "TODO" entry (file "~/org/capture.org")
             "* TODO %?\n\t%T\n\t%i\n\tLink: %l"
             :empty-lines-before 1
             :kill-buffer t)))

    ;; Override existing key binding "SPC C t" to use our template
    (defun ncw/capture-todo ()
      "Capture a TODO item to ~/org/capture.org."
      (interactive)
      (org-capture nil "t"))
    (spacemacs/set-leader-keys "Ct" 'ncw/capture-todo)

    ;; Hide markup characters and render with fancy emphasis
    ;; Taken from `spacemacs/prettify-org-buffer'.
    (defun ncw/org-fancify-markup ()
      (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n")
      (org-set-emph-re 'org-emphasis-regexp-components
                       org-emphasis-regexp-components)
      (setq-local org-emphasis-alist '(("*" bold)
                                       ("/" italic)
                                       ("_" underline)
                                       ("=" org-verbatim verbatim)
                                       ("~" org-kbd)
                                       ("+"
                                        (:strike-through t))))
      (setq-local org-hide-emphasis-markers t))
    (add-hook 'org-mode-hook 'ncw/org-fancify-markup)
    )
  )

(defun ncw/configure-dumb-jump ()
  ;; Lighter-weight "go to definition" than opening a REPL
  (add-hook 'ruby-mode-hook 'dumb-jump-mode)
  (spacemacs/set-leader-keys-for-major-mode 'ruby-mode
    "gG" 'dumb-jump-go
    "gB" 'dumb-jump-back))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
This function is mostly useful for variables that need to be set before
packages are loaded. If you are unsure, you should try setting them in
`dotspacemacs/user-config' first."
  (add-to-list 'load-path "~/.seacrest/emacs/load-path")
  (add-to-list 'load-path "~/.dotfiles/emacs/load-path"))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  ;; Don't require a GitHub token when using Paradox package manager
  (setq paradox-github-token t)

  ;; Treat symlinks like regular files; don't ask me for confirmation when
  ;; opening a symlink file.
  (setq vc-follow-symlinks t)

  ;; Auto-wrap long lines by default (in non-programming modes)
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Put version control symbols on left side instead of right
  (setq diff-hl-side 'left)
  (setq git-gutter-fr+-side 'left-fringe)

  ;; Move focus to new splits on easier keybindings
  (spacemacs/set-leader-keys
    "wv" 'split-window-right-and-focus
    "ws" 'split-window-below-and-focus)

  ;; Don't bother me with a warning popup when saving remote jarfiles
  (add-to-list 'warning-suppress-types '(undo discard-info))

  ;; Open a dired buffer when switching to new projects
  (setq projectile-switch-project-action 'projectile-dired)

  ;; Make undo a bit more aggressive in how much it undoes
  (setq evil-want-fine-undo "No")

  ;; Enable .agignore files in project roots
  (setq helm-ag-use-agignore t)

  ;; Hide all all those magit buffers
  (add-to-list 'helm-boring-buffer-regexp-list "\\*magit")

  ;; Truncate long lines globally by default
  (setq-default truncate-lines t)

  ;; Enable xml-mode for .jelly files
  (add-to-list 'auto-mode-alist '("\\.jelly\\'" . xml-mode))

  (setq powerline-default-separator 'bar)
  (spaceline-compile)

  (ncw/configure-dumb-jump)
  (ncw/configure-org)

  (require 'ncw-jjb nil t)
  )

;; Full-width comment box from: http://irreal.org/blog/?p=374
(defun ncw/comment-box (b e)
  "Draw a comment box around the selected region, but extend the right side
all the way up to (but not including) the fill column.

This is an improved version of the built-in `comment-box' function."
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    ;; Take the mode-specific comment configuration into account.
    ;; Also, stop 1 column short of the fill column since it looks better.
    (insert-char ? (- fill-column (current-column)
                      (length comment-start)
                      (length comment-padding)
                      (* 3 comment-add)
                      1))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
